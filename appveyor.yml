skip_non_tags: true

environment:

  PYPIPASSWORD:
    secure: pMUNGXxSoVJSBfSnTyzKivWsX834/d/orPAkta7p96VjD5oPrd8u4rcR9/adgMvy

  global:
    CMD_IN_ENV: "cmd /E:ON /V:ON /C .\\.appveyor\\windows_sdk.cmd"

  matrix:

    # For Python versions available on Appveyor, see
    # http://www.appveyor.com/docs/installed-software#python
    # The list here is complete (excluding Python 2.6, which
    # isn't covered by this document) at the time of writing.

    - PYTHON: "C:\\Python27-x64"
      PYTHON_VERSION: "2.7"
      PYTHON_ARCH: "64"
    - PYTHON: "C:\\Python27"
      PYTHON_VERSION: "2.7"

    - PYTHON: "C:\\Python36-x64"
      PYTHON_VERSION: "3.6"
      PYTHON_ARCH: "64"
    - PYTHON: "C:\\Python36"
      PYTHON_VERSION: "3.6"

    - PYTHON: "C:\\Python26-x64"
      PYTHON_VERSION: "2.6"
      PYTHON_ARCH: "64"
    - PYTHON: "C:\\Python26"
      PYTHON_VERSION: "2.6"

    - PYTHON: "C:\\Python35-x64"
      PYTHON_VERSION: "3.5"
      PYTHON_ARCH: "64"
    - PYTHON: "C:\\Python35"
      PYTHON_VERSION: "3.5"

    - PYTHON: "C:\\Python34-x64"
      PYTHON_VERSION: "3.4"
      PYTHON_ARCH: "64"
    - PYTHON: "C:\\Python34"
      PYTHON_VERSION: "3.4"

    - PYTHON: "C:\\Python33-x64"
      PYTHON_VERSION: "3.3"
      PYTHON_ARCH: "64"
    - PYTHON: "C:\\Python33"
      PYTHON_VERSION: "3.3"

install:
  # Set path again, need to find a way to avoid doing this again
  - "SET PATH=%PYTHON%;%PYTHON%\\Scripts;%PATH%"
  # We need wheel installed to build wheels
  - "pip install wheel twine"
  # Upgrade HTTPS client so twine works in Python 2.6
  - "pip install --upgrade ndg-httpsclient"

build: off

test_script:
  # Put your test command here.
  # If you don't need to build C extensions on 64-bit Python 3.3 or 3.4,
  # you can remove "%CMD_IN_ENV%" from the front of the command, as it's
  # only needed to support those cases.
  # Note that you must use the environment variable %PYTHON% to refer to
  # the interpreter you're using - Appveyor does not do anything special
  # to put the Python version you want to use on PATH.
  # - "%CMD_IN_ENV% python setup.py test"

after_test:
  # This step builds your wheels.
  # Again, you only need "%CMD_IN_ENV%" if you're building C extensions for
  # 64-bit Python 3.3/3.4. And you need to use %PYTHON% to get the correct
  # interpreter
  - "%CMD_IN_ENV% python setup.py bdist_wheel"

# artifacts:
#   # bdist_wheel puts your built wheel in the dist directory
#   - path: dist\*

on_success:
  #  You can use this step to upload your artifacts to a public website.
  #  See Appveyor's documentation for more details. Or you can simply
  #  access your wheels from the Appveyor "artifacts" tab for your build.
  - "dir .\\dist"
  - "if \"%APPVEYOR_REPO_TAG%\"==\"true\" ( twine upload -u Kronuz -p %PYPIPASSWORD% dist\\* )"
